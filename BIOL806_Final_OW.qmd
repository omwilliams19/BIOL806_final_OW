---
title: "BIOL806_Final_OW"
author: "Olivia Williams"
format: html
editor: visual
---

## Introduction

Paste intro here.

## Methods

Paste methods here.

## Results

![Figure 1: Initial UMAP of all cell types](Final_images/Figure1.png)

![Figure 2: Dorsal IPEC reclustered UMAP](Final_images/Figure2.png)

![Figure 3: Dorsal IPEC UMAP with Time point metadata.](Final_images/Figure3.png)

```{r}
#library for all needed packages
library(dplyr)
library(tidyverse)
library(kableExtra)
library(ggplot2)
#loading in all of the datasets I'm using for dot plots and frequency plots
genes_vs_T <- read.csv("TBX5_IPEs_subset_of_PAX6_pos_clusters_v3-dot_plot-Timepoints-All.csv")
genes_vs_C <- read.csv("TBX5_IPEs_subset_of_PAX6_pos_clusters_v3-dot_plot-louvain-All.csv")
cluster_composition <- read.csv("TBX5_IPEs_subset_of_PAX6_pos_clusters_v3-frequency_plot-proportional.csv")
prox1 <- read.csv("prox1_dot_plot.csv")

#loading in all 15 clusters batch differential expression
cluster0 <- read.csv("DE-Cluster_0.csv")
cluster1 <- read.csv("DE-Cluster_1.csv")
cluster2<- read.csv("DE-Cluster_2.csv")
cluster3<- read.csv("DE-Cluster_3.csv")
cluster4<- read.csv("DE-Cluster_4.csv")
cluster5<- read.csv("DE-Cluster_5.csv")
cluster6<- read.csv("DE-Cluster_6.csv")
cluster7<- read.csv("DE-Cluster_7.csv")
cluster8<- read.csv("DE-Cluster_8.csv")
cluster9<- read.csv("DE-Cluster_9.csv")
cluster10<- read.csv("DE-Cluster_10.csv")
cluster11<- read.csv("DE-Cluster_11.csv")
cluster12<- read.csv("DE-Cluster_12.csv")
cluster13<- read.csv("DE-Cluster_13.csv")
cluster14<- read.csv("DE-Cluster_14.csv")
cluster15<- read.csv("DE-Cluster_15.csv")
```

```{r}
#Table 1 is Batch Differential of the top 3-8 genes per cluster
#I know that a table as a figure might not seem very fancy but I spent over 2 hours on this table and I'm so happy with how it turned out. This figure is finalized.

#fixing the datasets to filter for best gene expression which will be different for each cluster. Then select for pct1, pct2, and gene name. Mutate to add a column with their cluster number to help with joining.

#where pct_1 is percent of that cluster expressing and pct2 is the percent of all other clusters expressing. Ideally pct1>90 and pct2<10 but these are very similar cell types so unlikely any will fit that.
new_cluster0 <- cluster0%>%
  filter(p_val_adj<0.05,
         pct_2<20,
         pct_1>90)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 0)

new_cluster1 <- cluster1%>%
  filter(p_val_adj<0.05,
         pct_2<40,
         pct_1>40)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 1)

#cluster 2 is just not unique so it's parameters are much worse than the others. When I ran pct_1>pct_2, pct_1>1 there was one gene. This means that only 1% of cluster 2 expressed it and less than 1% of the other expressed it. 
#due to this I decided to just find ones that over 80% expressed which was only 5 genes.
new_cluster2 <- cluster2%>%
  filter(p_val_adj<0.05,
         pct_1>80)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 2)

new_cluster3 <- cluster3%>%
  filter(p_val_adj<0.05,
         pct_1>75,
         pct_2<25)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 3)

new_cluster4 <- cluster4%>%
  filter(p_val_adj<0.05,
         pct_2<40,
         pct_1>70)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 4)

new_cluster5 <- cluster5%>%
  filter(p_val_adj<0.05,
         pct_1>80,
         pct_2<40)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 5)

new_cluster6 <- cluster6%>%
  filter(p_val_adj<0.05,
         pct_1>75,
         pct_2<25)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 6)

new_cluster7 <- cluster7%>%
  filter(p_val_adj<0.05,
         pct_1>70,
         pct_2<55)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 7)

new_cluster8 <- cluster8%>%
  filter(p_val_adj<0.05,
         pct_1>70,
         pct_2<40)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 8)

new_cluster9 <- cluster9%>%
  filter(p_val_adj<0.05,
         pct_1>90,
         pct_2<25)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 9)

new_cluster10 <- cluster10%>%
  filter(p_val_adj<0.05,
         pct_1>65,
         pct_2<40)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 10)

new_cluster11 <- cluster11%>%
  filter(p_val_adj<0.05,
         pct_1>60,
         pct_2<35)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 11)

new_cluster12 <- cluster12%>%
  filter(p_val_adj<0.05,
         pct_1>60,
         pct_2<40)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 12)

new_cluster13 <- cluster13%>%
  filter(p_val_adj<0.05,
         pct_1>70,
         pct_2<35)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 13)


new_cluster14 <- cluster14%>%
  filter(p_val_adj<0.05,
         pct_1>60,
         pct_2<40)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 14)


new_cluster15 <- cluster15%>%
  filter(p_val_adj<0.05,
         pct_1>70,
         pct_2<25)%>%
  select(Gene, pct_1, pct_2)%>%
  mutate(Cluster = 15)


#Now attempting to join them... I know there is probably a way easier way to do this but this was the only way I could get it to work
joined_clusters01<- full_join(new_cluster0, new_cluster1)

joined_clusters23<- full_join(new_cluster2, new_cluster3)

joined_clusters0123 <- full_join(joined_clusters01, joined_clusters23)

joined_clusters45 <- full_join(new_cluster4, new_cluster5)
joined_clusters67 <- full_join(new_cluster6, new_cluster7)

joined_clusters4567 <- full_join(joined_clusters45, joined_clusters67)

joined_clusters89 <- full_join(new_cluster8, new_cluster9)
joined_clusters1011<- full_join(new_cluster10, new_cluster11)

joined_clusters891011 <- full_join(joined_clusters89, joined_clusters1011)

joined_clusters1213 <- full_join(new_cluster12, new_cluster13)
joined_clusters1415 <- full_join(new_cluster14, new_cluster15)

joined_clusters12131415 <- full_join(joined_clusters1213, joined_clusters1415)

joined_clusters01234567 <- full_join(joined_clusters0123, joined_clusters4567)

joined_clusters89101112131415 <- full_join(joined_clusters891011, joined_clusters12131415)

final_joined <- full_join(joined_clusters01234567, joined_clusters89101112131415)

#kable to help round the digits and get a title
kable(final_joined,
      caption = "Marker Genes Per Cluster",
      digits = 1
      )
```

```{r}
#Figure 4 
 
#Full disclosure I got some of the extra settings for ggplot that we didn't learn in class from ChatGPT. Definitely needed tweaking. Still working on getting this one to look exactly right...
#I think I want to factor and reorder the genes to make it more clear

# Renaming columns for convenience
colnames(genes_vs_T) <- c("Gene", "Timepoint", "AvgExpression", "PercentExp")
#turns out the T10-16 get put before T2 so I'm making Time points into a factor
genes_vs_T <- genes_vs_T%>%
  mutate(Timepoint = as.factor(Timepoint))

#here I am reordering them to the correct time course
genes_vs_T <- genes_vs_T %>%
  mutate(Timepoint = fct_relevel(Timepoint, "T0", "T1", "T2", "T4", "T6", "T8", "T10", "T12", "T14", "T16"))

# Actually plotting
ggplot(genes_vs_T, aes(x = Gene, y = Timepoint)) +
  geom_point(aes(size = PercentExp, color = AvgExpression)) +
  scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +#this row from ChatGPT
  scale_size(range = c(0.5, 5)) +#and this row from ChatGPT
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
    axis.text.y = element_text(size = 10),
    plot.margin = margin(10, 10, 10, 10)
  ) +
  labs(x = "Gene names", y = "Timepoints", 
       size = "Percent Exp. (%)", color = "Avg. Expression")+
  ggtitle(label = "Marker Genes for each Timepoint")
```

Figure 4: Gene expression over time. Note that T0 is a negative control with no regeneration. It is comparable to iris at homeostasis.

```{r}
#Figure 5 will be a dot plot of genes versus cluster
#I got some of the extra settings for ggplot that we didn't learn in class from ChatGPT. Still working on getting this one to look exactly right...
#I think I want to factor and reorder the genes to make it more clear

# Renaming columns for convenience
colnames(genes_vs_C) <- c("Gene", "Cluster", "AvgExpression", "PercentExp")
#Have to reorder the clusters
genes_vs_C <- genes_vs_C%>%
  mutate(Cluster = as.factor(Cluster))

#here I am reordering them to the correct time course
genes_vs_C <- genes_vs_C%>%
  mutate(Cluster = fct_relevel(Cluster, "Cluster 0", "Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6", "Cluster 7", "Cluster 8", "Cluster 9", "Cluster 10", "Cluster 11", "Cluster 12", "Cluster 13", "Cluster 14", "Cluster 15"))

# Actually plotting
ggplot(genes_vs_C, aes(x = Gene, y = Cluster)) +
  geom_point(aes(size = PercentExp, color = AvgExpression)) +
  scale_color_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +#this row from ChatGPT
  scale_size(range = c(0.5, 5)) +#also this row from ChatGPT
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, size = 8),
    axis.text.y = element_text(size = 10),
    plot.margin = margin(10, 10, 10, 10)  
  ) +
  labs(x = "Gene names", y = "Clusters", 
       size = "Percent Exp. (%)", color = "Avg. Expression")+
  ggtitle(label = "Marker Genes for each Cluster")

```

Figure 5: Marker genes for each cluster of Dorsal IPECs

```{r}
#Figure 6 Frequency plot

#pivoting the data to be long
cluster_comp_long <- pivot_longer(cluster_composition, 
                          cols = -1,  #not the first column so it doesn't mess with the cluster column like the first time...
                          names_to = "Timepoints", 
                          values_to = "Proportion")

#Making Timepoints & Clusters factors and reordering again
cluster_comp_long <- cluster_comp_long%>%
  mutate(Timepoints = as.factor(Timepoints))
cluster_comp_long <- cluster_comp_long%>%
  mutate(leiden.clusters = as.factor(leiden.clusters))

cluster_comp_long <- cluster_comp_long %>%
  mutate(Timepoints = fct_relevel(Timepoints, "T0", "T1", "T2", "T4", "T6", "T8", "T10", "T12", "T14", "T16"))
cluster_comp_long <- cluster_comp_long%>%
  mutate(leiden.clusters = fct_relevel(leiden.clusters, "Cluster 0", "Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6", "Cluster 7", "Cluster 8", "Cluster 9", "Cluster 10", "Cluster 11", "Cluster 12", "Cluster 13", "Cluster 14", "Cluster 15"))

# Attempting a stacked bar plot
ggplot(cluster_comp_long, aes(x = Timepoints, y = Proportion, fill = leiden.clusters)) +
  geom_bar(stat = "identity", position = "fill") + 
  scale_y_continuous(labels = scales::percent_format()) + #this line also from chatGPT because I could not get it to actually do a percent and every row was equal every time I ran it 
  labs(x = "Timepoints", y = "Proportion", fill = "Cell Set") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8)
  )+
  ggtitle(label = "Frequency Plot")+
  scale_fill_viridis_d(option = "B") #had this package from one of the earlier lectures but I might do a more distinct color palette
```

Figure 6: Frequency plot of cluster composition for each time point.

```{r}
#Figure 7 will be a bar graph of PROX1 expression in each cluster. ggplot geom_bar instead of violin plot like I had planned only because I couldn't find a dataset that would work for it as I only have percent expressions, not individual cell data because it's too large for my computer.
#issues with colors again....
#I also want to run some sort of statisical test on this one, but I'm not really sure which ones right just yet.
prox1_edit <- prox1%>%
  select(Cluster, Fraction.of.cells.expressing.gene)
#of course clusters again need to be reordered...
prox1_edit <- prox1_edit%>%
  mutate(Cluster = as.factor(Cluster))

prox1_edit <- prox1_edit %>%
  mutate(Cluster = fct_relevel(Cluster, "Cluster 0", "Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5", "Cluster 6", "Cluster 7", "Cluster 8", "Cluster 9", "Cluster 10", "Cluster 11", "Cluster 12", "Cluster 13", "Cluster 14", "Cluster 15"))

ggplot(data = prox1_edit, aes(x= Cluster, y= Fraction.of.cells.expressing.gene, fill = "blue"))+
  geom_bar(stat = "identity")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position="none")+ #might have to change if I want the legend back for some reason
  ggtitle(label = "Expression of PROX1 per Cluster")+
  ylim(0, 100)+
  labs(x = "Clusters", y = "Percent Expression")
```

Figure 7: Lens marker gene PROX1 expression per cluster

## Discussion

Insert discussion here.

## References

finalized references from Zotero added here.
